


ARM Macro Assembler    Page 1 


    1 00000000         ;FILENAME:
    2 00000000         ;  lab3.s
    3 00000000         ;
    4 00000000         ;PURPOSE:
    5 00000000         ;  Implement and test two functions:
    6 00000000         ;    -allow calculating the factorial of 
    7 00000000         ;
    8 00000000         ;AUTHOR:
    9 00000000         ;  Daniel Shevtsov (SID: 200351253)
   10 00000000         
   11 00000000         ;;; Directives
   12 00000000                 PRESERVE8
   13 00000000                 THUMB
   14 00000000         
   15 00000000         
   16 00000000         ;;; Equates
   17 00000000 20001000 
                       INITIAL_MSP
                               EQU              0x20001000  ; Initial Main Stac
                                                            k Pointer Value All
                                                            ocating 
   18 00000000         ; 1000 bytes to the stack as it grows down.
   19 00000000         
   20 00000000         
   21 00000000         ; Vector Table Mapped to Address 0 at Reset
   22 00000000         ; Linker requires __Vectors to be exported
   23 00000000                 AREA             RESET, DATA, READONLY
   24 00000000                 EXPORT           __Vectors
   25 00000000         
   26 00000000 20001000 
                       __Vectors
                               DCD              INITIAL_MSP ; stack pointer val
                                                            ue when stack is em
                                                            pty
   27 00000004 00000000        DCD              Reset_Handler ; reset vector
   28 00000008         
   29 00000008                 ALIGN
   30 00000008         
   31 00000008         ;The program
   32 00000008         ; Linker requires Reset_Handler
   33 00000008                 AREA             MYCODE, CODE, READONLY
   34 00000000         
   35 00000000         
   36 00000000         
   37 00000000                 ENTRY
   38 00000000                 EXPORT           Reset_Handler
   39 00000000         
   40 00000000                 ALIGN
   41 00000000         
   42 00000000         ;Main program loop
   43 00000000         Reset_Handler
                               PROC
   44 00000000         
   45 00000000         ;Code starts here.
   46 00000000         
   47 00000000         ;;; PHASE 2
   48 00000000         
   49 00000000         ;Store an integer in a register.
   50 00000000 F04F 0004       MOV              R0, #4



ARM Macro Assembler    Page 2 


   51 00000004         
   52 00000004         ;Calculate the factorial of the integer above
   53 00000004         ;and store in another register.
   54 00000004         ;
   55 00000004         ;Expected behaviour:
   56 00000004         ;factorial(4) = 24 (0x18)
   57 00000004         ;factorial(1) = 1 (0x1)
   58 00000004 F7FF FFFE       BL               factorial
   59 00000008         
   60 00000008         ;Try factorial(1)
   61 00000008         ;
   62 00000008         ;Expected behaviour: factorial(1) = 1
   63 00000008 F04F 0001       MOV              R0, #1
   64 0000000C F7FF FFFE       BL               factorial
   65 00000010         
   66 00000010         ;Try factorial(0)
   67 00000010         ;
   68 00000010         ;Expected behaviour: factorial(0) = 1
   69 00000010 F04F 0000       MOV              R0, #0
   70 00000014 F7FF FFFE       BL               factorial
   71 00000018         
   72 00000018         ;;; PHASE 3
   73 00000018         
   74 00000018 4A2E            LDR              R2,=string1
   75 0000001A         ;Expected behaviour: countVowels(string1) = 13 (0xD)
   76 0000001A F7FF FFFE       BL               countVowels
   77 0000001E 4A2E            LDR              R2,=string2
   78 00000020         ;Expected behaviour: countVowels(string2) = 7 (0x7)
   79 00000020 F7FF FFFE       BL               countVowels
   80 00000024         
   81 00000024         ;Code ends here.
   82 00000024         
   83 00000024 E7FE            B                Reset_Handler
   84 00000026         
   85 00000026                 ENDP
   86 00000026         
   87 00000026         
   88 00000026         ;Subroutine factorial
   89 00000026         ;  Calculates factorial of register R0.
   90 00000026         ;  Stores result in register R1.
   91 00000026         ;
   92 00000026         ;  NOTE: Due to the 4-byte size of a register,
   93 00000026         ;    the largest value to which the function returns
   94 00000026         ;    the expected behaviour is 12 (0xC)
   95 00000026         ;    factorial(0xD) = 6,227,020,800 (0x1 7328 CC00)
   96 00000026         ;    but FFFF FFFF = 4,294,967,295 < factorial(0xD)
   97 00000026 00 00           ALIGN
   98 00000028         factorial
                               PROC
   99 00000028         
  100 00000028         ;Subroutine code starts here
  101 00000028         
  102 00000028         ;Remember R0
  103 00000028 B401            PUSH             {R0}
  104 0000002A         
  105 0000002A         ;Set R1 to 1 initially
  106 0000002A F04F 0101       MOV              R1, #1
  107 0000002E         
  108 0000002E         ;Check if R0 is 1 or 0



ARM Macro Assembler    Page 3 


  109 0000002E         ;Return if so, otherwise loop
  110 0000002E 2801            CMP              R0, #1
  111 00000030 D009            BEQ              EndFuncIf1Or0
  112 00000032         
  113 00000032 2800            CMP              R0, #0
  114 00000034 D007            BEQ              EndFuncIf1Or0
  115 00000036         
  116 00000036         ;Set R1 to R0
  117 00000036 4601            MOV              R1, R0
  118 00000038         
  119 00000038         ;Loop:
  120 00000038         ;Decrement R0
  121 00000038         ;Multiply R1 by R0
  122 00000038         ;End loop when R0 = 1
  123 00000038         Loop1
  124 00000038 F100 30FF       ADD              R0, #-1
  125 0000003C FB01 F100       MUL              R1, R0
  126 00000040 2801            CMP              R0, #1
  127 00000042 D1F9            BNE              Loop1
  128 00000044         
  129 00000044         ;Return R0 to its previous value
  130 00000044 BC01            POP              {R0}
  131 00000046         
  132 00000046         ;R1 now holds factorial of R0
  133 00000046         ;R0 now holds its original value
  134 00000046         
  135 00000046         ;Subroutine code ends here
  136 00000046         
  137 00000046         EndFuncIf1Or0
  138 00000046         
  139 00000046 4770            BX               LR
  140 00000048         
  141 00000048                 ENDP
  142 00000048         
  143 00000048         ;Subroutine countVowels
  144 00000048         ;  Counts the vowels in a string pointed to by R2
  145 00000048         ;  Stores result in register R3.
  146 00000048         ;  Uses value of register R4, then returns its previous 
                       value.
  147 00000048                 ALIGN
  148 00000048         countVowels
                               PROC
  149 00000048         
  150 00000048         ;Subroutine code starts here
  151 00000048         
  152 00000048         ;Remember R2, R4
  153 00000048 B414            PUSH             {R2, R4}
  154 0000004A         
  155 0000004A         ;Set R3 to 0
  156 0000004A F04F 0300       MOV              R3, #0
  157 0000004E         
  158 0000004E         ;Loop until null R2 points to null terminator
  159 0000004E         ;Increment R3 when a vowel is found
  160 0000004E         
  161 0000004E         Loop2
  162 0000004E         ;Load character ASCII pointed by R2 to R4
  163 0000004E 7814            LDRB             R4,[R2]
  164 00000050         
  165 00000050         ;Perform checks for vowels, increment R3 if check passes



ARM Macro Assembler    Page 4 


                       
  166 00000050 2C61            CMP              R4, #'a'
  167 00000052 D012            BEQ              FoundVowel
  168 00000054 2C41            CMP              R4, #'A'
  169 00000056 D010            BEQ              FoundVowel
  170 00000058 2C65            CMP              R4, #'e'
  171 0000005A D00E            BEQ              FoundVowel
  172 0000005C 2C45            CMP              R4, #'E'
  173 0000005E D00C            BEQ              FoundVowel
  174 00000060 2C69            CMP              R4, #'i'
  175 00000062 D00A            BEQ              FoundVowel
  176 00000064 2C49            CMP              R4, #'I'
  177 00000066 D008            BEQ              FoundVowel
  178 00000068 2C6F            CMP              R4, #'o'
  179 0000006A D006            BEQ              FoundVowel
  180 0000006C 2C4F            CMP              R4, #'O'
  181 0000006E D004            BEQ              FoundVowel
  182 00000070 2C75            CMP              R4, #'u'
  183 00000072 D002            BEQ              FoundVowel
  184 00000074 2C55            CMP              R4, #'U'
  185 00000076 D000            BEQ              FoundVowel
  186 00000078         
  187 00000078         ;If reached this point, none of the checks passed,
  188 00000078         ;so skip FoundVowel.
  189 00000078 E001            B                NotFoundVowel
  190 0000007A         
  191 0000007A         ;If vowel was found, increment R3, otherwise skip.
  192 0000007A         FoundVowel
  193 0000007A F103 0301       ADD              R3, #1
  194 0000007E         
  195 0000007E         NotFoundVowel
  196 0000007E         
  197 0000007E         ;Increment R0 position in string
  198 0000007E F102 0201       ADD              R2, #1
  199 00000082         
  200 00000082         ;See if null terminator was reached
  201 00000082 2C00            CMP              R4, #0
  202 00000084 D1E3            BNE              Loop2
  203 00000086         
  204 00000086         ;Restore R2, R4.
  205 00000086 BC14            POP              {R2, R4}
  206 00000088         
  207 00000088         ;Subroutine code ends here
  208 00000088         
  209 00000088 4770            BX               LR
  210 0000008A         
  211 0000008A                 ENDP
  212 0000008A         
  213 0000008A         ;;; Data
  214 0000008A 00 00           ALIGN
  215 0000008C         string1
  216 0000008C 45 4E 53 
              45 20 33 
              35 32 20 
              69 73 20 
              66 75 6E 
              20 61 6E 
              64 20 49 
              20 61 6D 



ARM Macro Assembler    Page 5 


              20 6C 65 
              61 72 6E 
              69 6E 67 
              20 41 52 
              4D 20 61 
              73 73 65 
              6D 62 6C 
              79 21 00         DCB              "ENSE 352 is fun and I am learn
ing ARM assembly!",0
  217 000000BC         string2
  218 000000BC 59 65 73 
              20 49 20 
              72 65 61 
              6C 6C 79 
              20 6C 6F 
              76 65 20 
              69 74 21 
              00               DCB              "Yes I really love it!",0
  219 000000D2         
  220 000000D2         
  221 000000D2                 END
              00 00 00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\lab3.d -o.\objects\lab3.o -IC:\Keil_v5\ARM\RV31\INC -IC:
\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x --predefine="__EVA
L SETA 1" --predefine="__UVISION_VERSION SETA 521" --list=.\listings\lab3.lst l
ab3.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 23 in file lab3.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 26 in file lab3.s
   Uses
      At line 24 in file lab3.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

EndFuncIf1Or0 00000046

Symbol: EndFuncIf1Or0
   Definitions
      At line 137 in file lab3.s
   Uses
      At line 111 in file lab3.s
      At line 114 in file lab3.s

FoundVowel 0000007A

Symbol: FoundVowel
   Definitions
      At line 192 in file lab3.s
   Uses
      At line 167 in file lab3.s
      At line 169 in file lab3.s
      At line 171 in file lab3.s
      At line 173 in file lab3.s
      At line 175 in file lab3.s
      At line 177 in file lab3.s
      At line 179 in file lab3.s
      At line 181 in file lab3.s
      At line 183 in file lab3.s
      At line 185 in file lab3.s

Loop1 00000038

Symbol: Loop1
   Definitions
      At line 123 in file lab3.s
   Uses
      At line 127 in file lab3.s
Comment: Loop1 used once
Loop2 0000004E

Symbol: Loop2
   Definitions
      At line 161 in file lab3.s
   Uses
      At line 202 in file lab3.s
Comment: Loop2 used once
MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 33 in file lab3.s
   Uses
      None
Comment: MYCODE unused
NotFoundVowel 0000007E

Symbol: NotFoundVowel
   Definitions
      At line 195 in file lab3.s
   Uses
      At line 189 in file lab3.s
Comment: NotFoundVowel used once
Reset_Handler 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Reset_Handler
   Definitions
      At line 43 in file lab3.s
   Uses
      At line 27 in file lab3.s
      At line 38 in file lab3.s
      At line 83 in file lab3.s

countVowels 00000048

Symbol: countVowels
   Definitions
      At line 148 in file lab3.s
   Uses
      At line 76 in file lab3.s
      At line 79 in file lab3.s

factorial 00000028

Symbol: factorial
   Definitions
      At line 98 in file lab3.s
   Uses
      At line 58 in file lab3.s
      At line 64 in file lab3.s
      At line 70 in file lab3.s

string1 0000008C

Symbol: string1
   Definitions
      At line 215 in file lab3.s
   Uses
      At line 74 in file lab3.s
Comment: string1 used once
string2 000000BC

Symbol: string2
   Definitions
      At line 217 in file lab3.s
   Uses
      At line 77 in file lab3.s
Comment: string2 used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

INITIAL_MSP 20001000

Symbol: INITIAL_MSP
   Definitions
      At line 17 in file lab3.s
   Uses
      At line 26 in file lab3.s
Comment: INITIAL_MSP used once
1 symbol
348 symbols in table
