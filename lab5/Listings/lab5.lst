


ARM Macro Assembler    Page 1 


    1 00000000         ;FILENAME:
    2 00000000         ;  lab5.s
    3 00000000         ;
    4 00000000         ;PURPOSE:
    5 00000000         ;  Implement Merge Sort and test by sorting a string.
    6 00000000         ;
    7 00000000         ;AUTHOR:
    8 00000000         ;  Daniel Shevtsov (SID: 200351253)
    9 00000000         
   10 00000000         ; Directives
   11 00000000                 PRESERVE8
   12 00000000                 THUMB
   13 00000000         
   14 00000000         ;;; Equates
   15 00000000 20001000 
                       end_of_stack
                               equ              0x20001000  ;Allocating 4kB of 
                                                            memory for the stac
                                                            k
   16 00000000 20000000 
                       RAM_START
                               equ              0x20000000
   17 00000000         
   18 00000000         ; Vector Table Mapped to Address 0 at Reset, Linker requ
                       ires __Vectors to be exported
   19 00000000         
   20 00000000                 AREA             RESET, DATA, READONLY
   21 00000000                 EXPORT           __Vectors
   22 00000000         ;The DCD directive allocates one or more words of memory
                       , aligned on four-byte boundaries, 
   23 00000000         ;and defines the initial runtime contents of the memory.
                       
   24 00000000         
   25 00000000         
   26 00000000         __Vectors
   27 00000000 20002000        DCD              0x20002000  ; stack pointer val
                                                            ue when stack is em
                                                            pty
   28 00000004 00000000        DCD              Reset_Handler ; reset vector
   29 00000008         
   30 00000008                 ALIGN
   31 00000008         
   32 00000008         ;The program
   33 00000008         ;Linker requires Reset_Handler
   34 00000008                 AREA             MYCODE, CODE, READONLY
   35 00000000                 ENTRY
   36 00000000                 EXPORT           Reset_Handler
   37 00000000         
   38 00000000                 ALIGN
   39 00000000         
   40 00000000         ;Main program loop
   41 00000000         Reset_Handler
                               PROC
   42 00000000         ;; Copy the string of characters from flash to RAM buffe
                       r so it 
   43 00000000         ;; can be sorted  - Student to do
   44 00000000         
   45 00000000         
   46 00000000         ;Test string = "A"



ARM Macro Assembler    Page 2 


   47 00000000         ;ptr to buffer in RAM containing the input string (strin
                       g_buffer)
   48 00000000 496A            ldr              r1,=string1
   49 00000002         ;ptr to auxiliary buffer in RAM used by subroutine "merg
                       e" (aux_buffer)
   50 00000002 F04F 5200       mov              r2,#RAM_START
   51 00000006         ;size of the string (contained in [size1] )
   52 00000006 F04F 0301       mov              r3,#string1size
   53 0000000A F7FF FFFE       bl               byte_copy   ;Calling subroutine
                                                             to store string in
                                                            to RAM
   54 0000000E         
   55 0000000E         ;ptr to buffer in RAM containing the input string (strin
                       g_buffer)
   56 0000000E 4611            mov              r1, r2
   57 00000010         ;ptr to auxiliary buffer in RAM used by subroutine "merg
                       e" (aux_buffer)
   58 00000010 441A            add              r2, r3
   59 00000012 F7FF FFFE       bl               sort        ;Calling subroutine
                                                             to sort the charac
                                                            ters in the buffer
   60 00000016         
   61 00000016         
   62 00000016         ;Test string = "aB"
   63 00000016         ;ptr to buffer in RAM containing the input string (strin
                       g_buffer)
   64 00000016 4966            ldr              r1,=string2
   65 00000018         ;ptr to auxiliary buffer in RAM used by subroutine "merg
                       e" (aux_buffer)
   66 00000018 F04F 5200       mov              r2,#RAM_START
   67 0000001C         ;size of the string (contained in [size1] )
   68 0000001C F04F 0302       mov              r3,#string2size
   69 00000020 F7FF FFFE       bl               byte_copy
   70 00000024         
   71 00000024         ;ptr to buffer in RAM containing the input string (strin
                       g_buffer)
   72 00000024 4611            mov              r1, r2
   73 00000026         ;ptr to auxiliary buffer in RAM used by subroutine "merg
                       e" (aux_buffer)
   74 00000026 441A            add              r2, r3
   75 00000028 F7FF FFFE       bl               sort        ;Calling subroutine
                                                             to sort the charac
                                                            ters in the buffer
   76 0000002C         
   77 0000002C         
   78 0000002C         ;Test string = "ABEFZACDGL"
   79 0000002C         ;ptr to buffer in RAM containing the input string (strin
                       g_buffer)
   80 0000002C 4961            ldr              r1,=string3
   81 0000002E         ;ptr to auxiliary buffer in RAM used by subroutine "merg
                       e" (aux_buffer)
   82 0000002E F04F 5200       mov              r2,#RAM_START
   83 00000032         ;size of the string (contained in [size1] )
   84 00000032 F04F 030A       mov              r3,#string3size
   85 00000036 F7FF FFFE       bl               byte_copy
   86 0000003A         
   87 0000003A         ;ptr to buffer in RAM containing the input string (strin
                       g_buffer)
   88 0000003A 4611            mov              r1, r2



ARM Macro Assembler    Page 3 


   89 0000003C         ;ptr to auxiliary buffer in RAM used by subroutine "merg
                       e" (aux_buffer)
   90 0000003C F102 020F       add              r2, #15
   91 00000040 F7FF FFFE       bl               sort        ;Calling subroutine
                                                             to sort the charac
                                                            ters in the buffer
   92 00000044         
   93 00000044         
   94 00000044         ;; Finished, loop to label done forever.
   95 00000044 E7FE    done    b                done        ; finished mainline
                                                             code.
   96 00000046                 ENDP
   97 00000046         
   98 00000046         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
   99 00000046         string1
  100 00000046 41              dcb              "A"
  101 00000047 00000001 
                       string1size
                               equ              . - string1
  102 00000047         
  103 00000047 00              align
  104 00000048         size1
  105 00000048 00000001        dcd              string1size
  106 0000004C         
  107 0000004C         string2
  108 0000004C 61 42           dcb              "aB"
  109 0000004E 00000002 
                       string2size
                               equ              . - string2
  110 0000004E         
  111 0000004E 00 00           align
  112 00000050         size2
  113 00000050 00000002        dcd              string2size
  114 00000054         
  115 00000054         string3
  116 00000054 41 42 45 
              46 5A 41 
              43 44 47 
              4C               dcb              "ABEFZACDGL"
  117 0000005E 0000000A 
                       string3size
                               equ              . - string3
  118 0000005E         
  119 0000005E 00 00           align
  120 00000060         size3
  121 00000060 0000000A        dcd              string3size
  122 00000064         
  123 00000064         ;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;
  124 00000064         ;;; Author: Daniel Shevtsov
  125 00000064         ;;; Sort an array of characters in ascending order using
                        the 
  126 00000064         ;;; algorithm described in the lab handout
  127 00000064         ;;; 
  128 00000064         ;;; Require:
  129 00000064         ;;; R1: ptr to buffer in RAM containing the input string
                        (string_buffer)
  130 00000064         ;;; R2: ptr to auxiliary buffer in RAM used by subroutin



ARM Macro Assembler    Page 4 


                       e "merge" (aux_buffer)
  131 00000064         ;;; R3: size of the string (contained in [size1] )
  132 00000064         ;;; 
  133 00000064         ;;; Promise: 
  134 00000064         ;;; Returns 1 in error register R10 if there was an erro
                       r, else 
  135 00000064         ;;; R10 is 0 and the buffer in RAM contains the sorted s
                       tring of characters
  136 00000064         ;;; Subroutine must not modify any other register.
  137 00000064         ;;; 
  138 00000064                 ALIGN
  139 00000064         sort    PROC
  140 00000064         ;Check if there is enough space in stack
  141 00000064 F8DF A150       LDR              R10,=end_of_stack
  142 00000068 EBBD 0A0A       SUBS             R10,SP,R10  ;R10 contains numbe
                                                            r of bytes availabl
                                                            e in stack   
  143 0000006C F1BA 0F2C       CMP              R10,#44     ;this subroutine re
                                                            quires at least 11 
                                                            words (44 bytes) of
                                                             free space in the 
                                                            stack 
  144 00000070 DC02            BGT              no_stack_overflow_sort
  145 00000072 F04F 0A01       MOV              R10,#1      ;not enough space i
                                                            n stack for this pr
                                                            ocedure
  146 00000076 4770            BX               LR
  147 00000078         
  148 00000078         no_stack_overflow_sort
  149 00000078 F04F 0A00       MOV              r10,#0
  150 0000007C         
  151 0000007C         
  152 0000007C         ;If size_input_array is 1, end function.
  153 0000007C 2B01            CMP              R3, #1
  154 0000007E D038            BEQ              endSort
  155 00000080         
  156 00000080         ;Else if size_input_array is 2, sort both elements and r
                       eturn.
  157 00000080 2B02            CMP              R3, #2
  158 00000082 D114            BNE              divideArray
  159 00000084 B40E            PUSH             {R1, R2, R3}
  160 00000086         
  161 00000086 780A            LDRB             R2, [R1]
  162 00000088 F101 0101       ADD              R1, #1
  163 0000008C 780B            LDRB             R3, [R1]
  164 0000008E F1A1 0101       SUB              R1, #1
  165 00000092         
  166 00000092         ;Sort R2 and R3 and store them back into RAM
  167 00000092 429A            CMP              R2, R3
  168 00000094 DC05            BGT              r2gtr3
  169 00000096         
  170 00000096         ;R3 > R2
  171 00000096 700A            STRB             R2, [R1]
  172 00000098 F101 0101       ADD              R1, #1
  173 0000009C 700B            STRB             R3, [R1]
  174 0000009E         
  175 0000009E BC0E            POP              {R1, R2, R3}
  176 000000A0 E027            B                endSort
  177 000000A2         



ARM Macro Assembler    Page 5 


  178 000000A2         r2gtr3
  179 000000A2         ;R2 > R3
  180 000000A2 700B            STRB             R3, [R1]
  181 000000A4 F101 0101       ADD              R1, #1
  182 000000A8 700A            STRB             R2, [R1]
  183 000000AA         
  184 000000AA BC0E            POP              {R1, R2, R3}
  185 000000AC E021            B                endSort
  186 000000AE         
  187 000000AE         ;Else
  188 000000AE         ;Divide input array in half and sort each half separatel
                       y
  189 000000AE         divideArray
  190 000000AE         ;Initial conditions:
  191 000000AE         ;R1 = ptr_input_array
  192 000000AE         ;R2 = aux_buffer
  193 000000AE         ;R3 = size_input_array
  194 000000AE         
  195 000000AE B4FE            PUSH             {R1, R2, R3, R4, R5, R6, R7}
  196 000000B0         
  197 000000B0 B40E            PUSH             {R1, R2, R3}
  198 000000B2         
  199 000000B2         ;ptr_sublist1 = ptr_input_array
  200 000000B2         
  201 000000B2         ;size_sublist1 = size_input_array / 2
  202 000000B2 EA4F 0353       LSR              R3, #1
  203 000000B6         
  204 000000B6         ;Recursive call
  205 000000B6         ;sort(ptr_sublist1, size_sublist1)
  206 000000B6 B500            PUSH             {LR}
  207 000000B8 F7FF FFFE       BL               sort
  208 000000BC F85D EB04       POP              {LR}
  209 000000C0         
  210 000000C0         ;Store R4 = ptr_sublist1 and R5 = size_sublist1
  211 000000C0 460C            MOV              R4, R1
  212 000000C2 461D            MOV              R5, R3
  213 000000C4         
  214 000000C4 BC0E            POP              {R1, R2, R3}
  215 000000C6         
  216 000000C6 B40E            PUSH             {R1, R2, R3}
  217 000000C8         
  218 000000C8         ;ptr_sublist2 = ptr_input_array + size_sublist1
  219 000000C8 4429            ADD              R1, R1, R5
  220 000000CA         
  221 000000CA         ;size_sublist2 = size_input_array / 2
  222 000000CA EA4F 0353       LSR              R3, #1
  223 000000CE         
  224 000000CE         ;Recursive call
  225 000000CE         ;sort(ptr_sublist2, size_sublist2)
  226 000000CE B500            PUSH             {LR}
  227 000000D0 F7FF FFFE       BL               sort
  228 000000D4 F85D EB04       POP              {LR}
  229 000000D8         
  230 000000D8         ;Store R6 = ptr_sublist1 and R7 = size_sublist1
  231 000000D8 460E            MOV              R6, R1
  232 000000DA 461F            MOV              R7, R3
  233 000000DC         
  234 000000DC BC0E            POP              {R1, R2, R3}
  235 000000DE         



ARM Macro Assembler    Page 6 


  236 000000DE         ;ptr_sorted_array = merge (ptr_sublist1, ptr_sublist2, s
                       ize_input_array)
  237 000000DE         ;Reroute registers to satisfy inputs for merge function
  238 000000DE         ;R1: pointer to an auxiliary buffer
  239 000000DE 4611            MOV              R1, R2
  240 000000E0         ;R2: pointer to sublist1
  241 000000E0 4622            MOV              R2, R4
  242 000000E2         ;R4: pointer to sublist2
  243 000000E2 4634            MOV              R4, R6
  244 000000E4         ;R5: size of sublist1
  245 000000E4         ;R6: size of sublist2
  246 000000E4 463E            MOV              R6, R7
  247 000000E6         
  248 000000E6 B500            PUSH             {LR}
  249 000000E8 F7FF FFFE       BL               merge
  250 000000EC F85D EB04       POP              {LR}
  251 000000F0         
  252 000000F0 BCFE            POP              {R1, R2, R3, R4, R5, R6, R7}
  253 000000F2         
  254 000000F2         endSort
  255 000000F2         
  256 000000F2 4770            BX               LR
  257 000000F4         
  258 000000F4                 ENDP
  259 000000F4         
  260 000000F4         
  261 000000F4         
  262 000000F4         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
  263 000000F4         ;;; copy an array of bytes from source ptr R1 to dest pt
                       r R2.  R3
  264 000000F4         ;;; contains the number of bytes to copy.
  265 000000F4         ;;; Require:
  266 000000F4         ;;; The destination had better be somewhere in RAM, but 
                       that's the
  267 000000F4         ;;; caller's responsibility.  As is the job to ensure th
                       e source and 
  268 000000F4         ;;; dest arrays don't overlap.
  269 000000F4         ;;;
  270 000000F4         ;;; Promise: No registers are modified.  The destination
                        buffer is
  271 000000F4         ;;;          modified.
  272 000000F4         ;;; Author: Prof. Karim Naqvi (Oct 2013)
  273 000000F4                 ALIGN
  274 000000F4         byte_copy
                               PROC
  275 000000F4 B41E            push             {r1,r2,r3,r4}
  276 000000F6         
  277 000000F6 F04F 0500       mov              r5, #0
  278 000000FA         loop
  279 000000FA 780C            ldrb             r4, [r1]
  280 000000FC 7014            strb             r4, [r2]
  281 000000FE         
  282 000000FE F101 0101       add              r1,#1
  283 00000102 F102 0201       add              r2,#1
  284 00000106 F105 0501       add              r5,#1
  285 0000010A 42AB            cmp              r3,r5
  286 0000010C D1F5            bne              loop
  287 0000010E         



ARM Macro Assembler    Page 7 


  288 0000010E BC1E            pop              {r1,r2,r3,r4}
  289 00000110 4770            bx               lr
  290 00000112                 ENDP
  291 00000112         
  292 00000112         
  293 00000112         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
  294 00000112         ;;; Author: Diego Castro (Nov 2013)
  295 00000112         ;;; Merges two sorted sublists (sublist1 and sublist2) t
                       hat 
  296 00000112         ;;; contains the ASCII code of characters. Resulting arr
                       ay 
  297 00000112         ;;; combines the characters of both sublists and it is s
                       orted in ascending order
  298 00000112         ;;; The subroutine will overwrite the original contents 
                       of both sublists
  299 00000112         ;;;
  300 00000112         ;;; Require: 
  301 00000112         ;;;  R1: pointer to an auxiliary buffer
  302 00000112         ;;;  R2: pointer to sublist1
  303 00000112         ;;;  R4: pointer to sublist2
  304 00000112         ;;;  R5: size of sublist1
  305 00000112         ;;;    R6: size of sublist2 
  306 00000112         ;;; Promise: Sublist1 and sublist2 are adjacent buffers 
                       in memory 
  307 00000112         ;;; (i.e. first memory address of sublist2 is located 
  308 00000112         ;;; right after last memory address of sublist1). Both s
                       ublists will be overwritten  
  309 00000112         ;;; with the sorted array after merging. 
  310 00000112         ;;; If stack overflow occurs, it returns 1 in error regi
                       ster R10 else r10 is zero. 
  311 00000112         ;;; Subroutine does not modify any other register.
  312 00000112         ;;; Example: 
  313 00000112         ;;;            sublist1  |  Sublist2
  314 00000112         ;;;                  degz|fht
  315 00000112         ;;;
  316 00000112         ;;;            sorted array
  317 00000112         ;;;                  defghtz
  318 00000112         ;;; Note: this function needs at least 9 words of free s
                       pace in the stack
  319 00000112 00 00           ALIGN
  320 00000114         merge   PROC
  321 00000114         
  322 00000114         ;;;checking if there is enough space in stack
  323 00000114 F8DF A0A0       ldr              r10,=end_of_stack
  324 00000118 EBBD 0A0A       subs             r10,sp,r10  ;R10 contains numbe
                                                            r of bytes availabl
                                                            e in stack   
  325 0000011C F1BA 0F24       cmp              r10,#36     ;this subroutine re
                                                            quires at least 9 w
                                                            ords (36 bytes) of 
                                                            free space in the s
                                                            tack 
  326 00000120 DC02            bgt              no_stack_overflow
  327 00000122 F04F 0A01       mov              r10,#1      ;not enough space i
                                                            n stack for this pr
                                                            ocedure
  328 00000126 4770            bx               lr
  329 00000128         



ARM Macro Assembler    Page 8 


  330 00000128         
  331 00000128         no_stack_overflow
  332 00000128 F04F 0A00       mov              r10,#0
  333 0000012C B508            push             {r3,lr}
  334 0000012E E92D 01F6       push             {r1,r2,r4,r5,r6,r7,r8}
  335 00000132         
  336 00000132         
  337 00000132 B915    check   cbnz             r5,load_sub1 ;when r5 is 0, we 
                                                            are done checking s
                                                            ublist 1
  338 00000134 F04F 078F       mov              r7,#0x8F    ;done with sublist 
                                                            1, loading high val
                                                            ue in R7
  339 00000138 E004            b                load_sub2
  340 0000013A         load_sub1
  341 0000013A 7817            ldrb             r7,[r2]     ;R7 contains curren
                                                            t ASCII code of cha
                                                            racter in sublist1
  342 0000013C B916            cbnz             r6,load_sub2
  343 0000013E F04F 088F       mov              r8,#0x8F    ;done with sublist 
                                                            2, loading high val
                                                            ue in R8
  344 00000142 E001            b                compare
  345 00000144         load_sub2
  346 00000144 F894 8000       ldrb             r8,[r4]     ;R8 contains curren
                                                            t ASCII code of cha
                                                            racter in sublist2
  347 00000148         
  348 00000148 4547    compare cmp              r7,r8
  349 0000014A D113            bne              charac_diff
  350 0000014C 700F            strb             r7,[r1]     ;both characters ar
                                                            e equal, we copy bo
                                                            th to the aux buffe
                                                            r;
  351 0000014E F101 0101       add              r1,#1
  352 00000152 F881 8000       strb             r8,[r1]
  353 00000156 F101 0101       add              r1,#1
  354 0000015A         ;;;Updating indexes
  355 0000015A B115            cbz              r5,cont_sub2 ;index for sublist
                                                             1 will be zero whe
                                                            n we are done inspe
                                                            cting that sublist
  356 0000015C 3D01            subs             r5,#1
  357 0000015E F102 0201       add              r2,#1
  358 00000162 B116    cont_sub2
                               cbz              r6,check_if_done ;index for sub
                                                            list 2 will be zero
                                                             when we are done i
                                                            nspecting that subl
                                                            ist
  359 00000164 3E01            subs             r6,#1
  360 00000166 F104 0401       add              r4,#1
  361 0000016A         check_if_done
  362 0000016A 42B5            cmp              r5,r6
  363 0000016C D1E1            bne              check
  364 0000016E 2D00            cmp              r5,#0       ;both indexes are z
                                                            ero, then we are do
                                                            ne
  365 00000170 D014            beq              finish



ARM Macro Assembler    Page 9 


  366 00000172 E7DE            b                check
  367 00000174         
  368 00000174         charac_diff                          ;;;Only copy to aux
                                                             buffer the charect
                                                            er with smallest co
                                                            de, update its corr
                                                            esponding index 
  369 00000174 DC08            bgt              reverse_order
  370 00000176 700F            strb             r7,[r1]     ;character in subli
                                                            st1 in less than th
                                                            e code of character
                                                             in sublist2
  371 00000178 F101 0101       add              r1,#1
  372 0000017C 2D00            cmp              r5,#0
  373 0000017E D0F4            beq              check_if_done ;index for sublis
                                                            t 1 will be zero wh
                                                            en we are done insp
                                                            ecting that sublist
                                                            
  374 00000180 3D01            subs             r5,#1
  375 00000182 F102 0201       add              r2,#1
  376 00000186 E7F0            b                check_if_done
  377 00000188         reverse_order
  378 00000188 F881 8000       strb             r8,[r1]     ;character in subli
                                                            st2 in less than ch
                                                            aracter in sublist1
                                                            .
  379 0000018C F101 0101       add              r1,#1
  380 00000190 2E00            cmp              r6,#0
  381 00000192 D0EA            beq              check_if_done ;index for sublis
                                                            t 1 will be zero wh
                                                            en we are done insp
                                                            ecting that sublist
                                                            
  382 00000194 3E01            subs             r6,#1
  383 00000196 F104 0401       add              r4,#1
  384 0000019A E7E6            b                check_if_done
  385 0000019C         
  386 0000019C E8BD 01F6 
                       finish  pop              {r1,r2,r4,r5,r6,r7,r8}
  387 000001A0         ;r1 contains now the memory address of source buffer ...
                        in this case aux_buffer
  388 000001A0         ;r2 constains now vthe memory address of destination buf
                       fer ... in this case sublist1
  389 000001A0 EB05 0306       add              r3,r5,r6    ;size of sorted str
                                                            ing is the addition
                                                            g of the size of bo
                                                            th sublists
  390 000001A4         
  391 000001A4 F7FF FFFE       bl               byte_copy   ;;;copy aux buffer 
                                                            to input buffer 
  392 000001A8         
  393 000001A8 BD08            pop              {r3,pc}
  394 000001AA                 ENDP
  395 000001AA         
  396 000001AA         ;End of assembly file.
  397 000001AA 00 00           ALIGN
  398 000001AC                 END
              00000000 



ARM Macro Assembler    Page 10 


              00000000 
              00000000 
              20001000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\lab5.d -o.\objects\lab5.o -IC:\Keil_v5\ARM\RV31\INC -IC:
\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x --predefine="__EVA
L SETA 1" --predefine="__UVISION_VERSION SETA 521" --list=.\listings\lab5.lst l
ab5.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 20 in file lab5.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 26 in file lab5.s
   Uses
      At line 21 in file lab5.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 34 in file lab5.s
   Uses
      None
Comment: MYCODE unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 41 in file lab5.s
   Uses
      At line 28 in file lab5.s
      At line 36 in file lab5.s

byte_copy 000000F4

Symbol: byte_copy
   Definitions
      At line 274 in file lab5.s
   Uses
      At line 53 in file lab5.s
      At line 69 in file lab5.s
      At line 85 in file lab5.s
      At line 391 in file lab5.s

charac_diff 00000174

Symbol: charac_diff
   Definitions
      At line 368 in file lab5.s
   Uses
      At line 349 in file lab5.s
Comment: charac_diff used once
check 00000132

Symbol: check
   Definitions
      At line 337 in file lab5.s
   Uses
      At line 363 in file lab5.s
      At line 366 in file lab5.s

check_if_done 0000016A

Symbol: check_if_done
   Definitions
      At line 361 in file lab5.s
   Uses
      At line 358 in file lab5.s
      At line 373 in file lab5.s
      At line 376 in file lab5.s
      At line 381 in file lab5.s
      At line 384 in file lab5.s

compare 00000148




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: compare
   Definitions
      At line 348 in file lab5.s
   Uses
      At line 344 in file lab5.s
Comment: compare used once
cont_sub2 00000162

Symbol: cont_sub2
   Definitions
      At line 358 in file lab5.s
   Uses
      At line 355 in file lab5.s
Comment: cont_sub2 used once
divideArray 000000AE

Symbol: divideArray
   Definitions
      At line 189 in file lab5.s
   Uses
      At line 158 in file lab5.s
Comment: divideArray used once
done 00000044

Symbol: done
   Definitions
      At line 95 in file lab5.s
   Uses
      At line 95 in file lab5.s
Comment: done used once
endSort 000000F2

Symbol: endSort
   Definitions
      At line 254 in file lab5.s
   Uses
      At line 154 in file lab5.s
      At line 176 in file lab5.s
      At line 185 in file lab5.s

finish 0000019C

Symbol: finish
   Definitions
      At line 386 in file lab5.s
   Uses
      At line 365 in file lab5.s
Comment: finish used once
load_sub1 0000013A

Symbol: load_sub1
   Definitions
      At line 340 in file lab5.s
   Uses
      At line 337 in file lab5.s
Comment: load_sub1 used once
load_sub2 00000144

Symbol: load_sub2



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 345 in file lab5.s
   Uses
      At line 339 in file lab5.s
      At line 342 in file lab5.s

loop 000000FA

Symbol: loop
   Definitions
      At line 278 in file lab5.s
   Uses
      At line 286 in file lab5.s
Comment: loop used once
merge 00000114

Symbol: merge
   Definitions
      At line 320 in file lab5.s
   Uses
      At line 249 in file lab5.s
Comment: merge used once
no_stack_overflow 00000128

Symbol: no_stack_overflow
   Definitions
      At line 331 in file lab5.s
   Uses
      At line 326 in file lab5.s
Comment: no_stack_overflow used once
no_stack_overflow_sort 00000078

Symbol: no_stack_overflow_sort
   Definitions
      At line 148 in file lab5.s
   Uses
      At line 144 in file lab5.s
Comment: no_stack_overflow_sort used once
r2gtr3 000000A2

Symbol: r2gtr3
   Definitions
      At line 178 in file lab5.s
   Uses
      At line 168 in file lab5.s
Comment: r2gtr3 used once
reverse_order 00000188

Symbol: reverse_order
   Definitions
      At line 377 in file lab5.s
   Uses
      At line 369 in file lab5.s
Comment: reverse_order used once
size1 00000048

Symbol: size1
   Definitions
      At line 104 in file lab5.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: size1 unused
size2 00000050

Symbol: size2
   Definitions
      At line 112 in file lab5.s
   Uses
      None
Comment: size2 unused
size3 00000060

Symbol: size3
   Definitions
      At line 120 in file lab5.s
   Uses
      None
Comment: size3 unused
sort 00000064

Symbol: sort
   Definitions
      At line 139 in file lab5.s
   Uses
      At line 59 in file lab5.s
      At line 75 in file lab5.s
      At line 91 in file lab5.s
      At line 207 in file lab5.s
      At line 227 in file lab5.s

string1 00000046

Symbol: string1
   Definitions
      At line 99 in file lab5.s
   Uses
      At line 48 in file lab5.s
      At line 101 in file lab5.s

string2 0000004C

Symbol: string2
   Definitions
      At line 107 in file lab5.s
   Uses
      At line 64 in file lab5.s
      At line 109 in file lab5.s

string3 00000054

Symbol: string3
   Definitions
      At line 115 in file lab5.s
   Uses
      At line 80 in file lab5.s
      At line 117 in file lab5.s

27 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

RAM_START 20000000

Symbol: RAM_START
   Definitions
      At line 16 in file lab5.s
   Uses
      At line 50 in file lab5.s
      At line 66 in file lab5.s
      At line 82 in file lab5.s

end_of_stack 20001000

Symbol: end_of_stack
   Definitions
      At line 15 in file lab5.s
   Uses
      At line 141 in file lab5.s
      At line 323 in file lab5.s

string1size 00000001

Symbol: string1size
   Definitions
      At line 101 in file lab5.s
   Uses
      At line 52 in file lab5.s
      At line 105 in file lab5.s

string2size 00000002

Symbol: string2size
   Definitions
      At line 109 in file lab5.s
   Uses
      At line 68 in file lab5.s
      At line 113 in file lab5.s

string3size 0000000A

Symbol: string3size
   Definitions
      At line 117 in file lab5.s
   Uses
      At line 84 in file lab5.s
      At line 121 in file lab5.s

5 symbols
368 symbols in table
